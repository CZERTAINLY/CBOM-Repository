// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetBOMByUrnParams is parameters of getBOMByUrn operation.
type GetBOMByUrnParams struct {
	// Unique resource identifier (URN), corresponds to CycloneDX serial number.
	Urn string
	// Optional `version`. If omitted, returns latest version.
	Version OptInt
}

func unpackGetBOMByUrnParams(packed middleware.Parameters) (params GetBOMByUrnParams) {
	{
		key := middleware.ParameterKey{
			Name: "urn",
			In:   "path",
		}
		params.Urn = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Version = v.(OptInt)
		}
	}
	return params
}

func decodeGetBOMByUrnParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBOMByUrnParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: urn.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "urn",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Urn = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "urn",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: version.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVersionVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Version.SetTo(paramsDotVersionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
